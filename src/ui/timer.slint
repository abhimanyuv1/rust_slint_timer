import { Button, LineEdit, VerticalBox, HorizontalBox } from "std-widgets.slint";

export component TimerWindow inherits Window {
    title: "Rust Slint Timer";
    width: 500px;
    height: 450px;
    
    // Properties for timer state
    in-out property <int> input-hours: 0;
    in-out property <int> input-minutes: 5;
    in-out property <int> input-seconds: 0;
    in-out property <string> display-time: "00:05:00";
    in-out property <bool> is-running: false;
    in-out property <bool> is-completed: false;
    
    // Callbacks for user interactions
    callback start-pause-clicked();
    callback reset-clicked();
    callback time-input-changed(int, int, int);
    
    VerticalBox {
        padding: 20px;
        spacing: 20px;
        
        // Title
        Text {
            text: "Timer";
            font-size: 24px;
            font-weight: 700;
            horizontal-alignment: center;
            color: #333;
        }
        
        // Time input section
        Rectangle {
            background: #f8f9fa;
            border-color: #dee2e6;
            border-width: 1px;
            border-radius: 8px;
            
            VerticalBox {
                padding: 15px;
                spacing: 10px;
                
                Text {
                    text: "Set Timer";
                    font-size: 16px;
                    font-weight: 600;
                    color: #495057;
                }
                
                HorizontalBox {
                    spacing: 15px;
                    alignment: center;
                    
                    VerticalBox {
                        spacing: 5px;
                        Text {
                            text: "Hours";
                            font-size: 12px;
                            horizontal-alignment: center;
                            color: #495057;
                        }
                        LineEdit {
                            text: input-hours;
                            placeholder-text: "0";
                            width: 60px;
                            horizontal-alignment: center;
                            edited => {
                                input-hours = self.text.to-float();
                                time-input-changed(input-hours, input-minutes, input-seconds);
                            }
                        }
                    }
                    
                    VerticalBox {
                        spacing: 5px;
                        Text {
                            text: "Minutes";
                            font-size: 12px;
                            horizontal-alignment: center;
                            color: #495057;
                        }
                        LineEdit {
                            text: input-minutes;
                            placeholder-text: "0";
                            width: 60px;
                            horizontal-alignment: center;
                            edited => {
                                input-minutes = self.text.to-float();
                                time-input-changed(input-hours, input-minutes, input-seconds);
                            }
                        }
                    }
                    
                    VerticalBox {
                        spacing: 5px;
                        Text {
                            text: "Seconds";
                            font-size: 12px;
                            horizontal-alignment: center;
                            color: #495057;
                        }
                        LineEdit {
                            text: input-seconds;
                            placeholder-text: "0";
                            width: 60px;
                            horizontal-alignment: center;
                            edited => {
                                input-seconds = self.text.to-float();
                                time-input-changed(input-hours, input-minutes, input-seconds);
                            }
                        }
                    }
                }
            }
        }
        
        // Timer display
        Rectangle {
            background: is-completed ? #e8f5e8 : (is-running ? #fff3cd : #f8f9fa);
            border-color: is-completed ? #28a745 : (is-running ? #ffc107 : #dee2e6);
            border-width: 2px;
            border-radius: 8px;
            height: 80px;
            
            Text {
                text: display-time;
                font-size: 36px;
                font-weight: 700;
                horizontal-alignment: center;
                vertical-alignment: center;
                color: is-completed ? #155724 : (is-running ? #856404 : #495057);
            }
        }
        
        // Status message with completion indicator
        HorizontalBox {
            alignment: center;
            spacing: 8px;
            
            if is-completed: Text {
                text: "✅";
                font-size: 18px;
            }
            
            Text {
                text: is-completed ? "Timer Completed!" : (is-running ? "Timer Running..." : "Timer Ready");
                font-size: 14px;
                horizontal-alignment: center;
                color: is-completed ? #28a745 : (is-running ? #ffc107 : #6c757d);
                font-weight: 600;
            }
            
            if is-completed: Text {
                text: "🎉";
                font-size: 18px;
            }
        }
        
        // Control buttons
        HorizontalBox {
            spacing: 15px;
            alignment: center;
            
            Button {
                text: is-running ? "⏸ Pause" : "▶ Start";
                primary: true;
                enabled: !is-completed && (input-hours > 0 || input-minutes > 0 || input-seconds > 0);
                min-width: 100px;
                clicked => {
                    start-pause-clicked();
                }
            }
            
            Button {
                text: "🔄 Reset";
                min-width: 100px;
                clicked => {
                    reset-clicked();
                }
            }
        }
        
        // Additional keyboard shortcut hint
        Text {
            text: "Tip: Use spacebar to start/pause timer";
            font-size: 11px;
            horizontal-alignment: center;
            color: #6c757d;
            opacity: 0.8;
        }
    }
}